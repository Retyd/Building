/**
 * Создайте класс OfficeFloor этажа офисного здания.
 * Работа класса должна быть основана на односвязном циклическом списке офисов с выделенной головой.
 * Номер офиса явно не хранится.
 */
public class OfficeFloor {
	private class Node{
		public Node next;		
	}
	
	private Node head;
		
	public OfficeFloor() {
		head = new Node();
		head.next = head;
	}

    /**
     * Создайте приватный метод получения узла по его номеру.
     */
	private Node getNode(int index) {
		Node temp = head;
		for (int i = 0; i < index; i++) {
			temp = temp.next;
		}
		return temp;
	}
	 
    /**
	 * Создайте приватный метод добавления узла в список по номеру.
     */
	private void addNode(Node node, int index) {
		Node temp = head;
		for (int i = 0; i < index; i++) {
			temp = temp.next;
		}
		node.next = temp.next;		
		temp.next = node;
	}
	
	/**
	* Создайте приватный метод удаления узла из списка по его номеру.
    */
	private void removeNode(int index) {
		Node temp = head;
		for (int i = 0; i < index; i++) {
			temp = temp.next;
			if (i == index) {
				temp.next = temp.next.next;				
			}
		}
	}
	
	/**
	* Конструктор может принимать количество офисов на этаже.
    */ 
	
	/**
	* Конструктор может принимать массив офисов этажа.
    */
	
	/**
	* Создайте метод получения количества офисов на этаже.
    */
	
	/**
	* Создайте метод получения общей площади помещений этажа.
    */
	
	/**
	* Создайте метод получения общего количества комнат этажа.
    */
	
	/**
	* Создайте метод получения массива офисов этажа.
    */
	
	/**
	* Создайте метод получения офиса по его номеру на этаже.
    */
	
	/**
	* Создайте метод изменения офиса по его номеру на этаже и ссылке на обновленный офис.
    */
	
	/**
	* Создайте метод добавления нового офиса на этаже по будущему номеру офиса.
    */
	
	/**
	* Создайте метод удаления офиса по его номеру на этаже.
    */
	
	/**
	* Создайте метод getBestSpace() получения самого большого по площади офиса этажа.
	*/
}
